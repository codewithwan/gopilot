// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTodos = `-- name: CountTodos :one
SELECT COUNT(*)
FROM todos
WHERE user_id = $1
`

func (q *Queries) CountTodos(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countTodos, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPaste = `-- name: CreatePaste :one
INSERT INTO pastes (id, title, content, syntax, is_public, is_compressed, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, content, syntax, is_public, is_compressed, expires_at, created_at, updated_at
`

type CreatePasteParams struct {
	ID           string           `json:"id"`
	Title        pgtype.Text      `json:"title"`
	Content      string           `json:"content"`
	Syntax       pgtype.Text      `json:"syntax"`
	IsPublic     bool             `json:"is_public"`
	IsCompressed bool             `json:"is_compressed"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

// Pastebin Queries
func (q *Queries) CreatePaste(ctx context.Context, arg CreatePasteParams) (Paste, error) {
	row := q.db.QueryRow(ctx, createPaste,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Syntax,
		arg.IsPublic,
		arg.IsCompressed,
		arg.ExpiresAt,
	)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Syntax,
		&i.IsPublic,
		&i.IsCompressed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createQRCode = `-- name: CreateQRCode :one
INSERT INTO qr_codes (id, text, format, size, image_data)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, text, format, size, created_at
`

type CreateQRCodeParams struct {
	ID        string `json:"id"`
	Text      string `json:"text"`
	Format    string `json:"format"`
	Size      int32  `json:"size"`
	ImageData []byte `json:"image_data"`
}

type CreateQRCodeRow struct {
	ID        string           `json:"id"`
	Text      string           `json:"text"`
	Format    string           `json:"format"`
	Size      int32            `json:"size"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

// QR Code Queries
func (q *Queries) CreateQRCode(ctx context.Context, arg CreateQRCodeParams) (CreateQRCodeRow, error) {
	row := q.db.QueryRow(ctx, createQRCode,
		arg.ID,
		arg.Text,
		arg.Format,
		arg.Size,
		arg.ImageData,
	)
	var i CreateQRCodeRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Format,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const createShortURL = `-- name: CreateShortURL :one
INSERT INTO short_urls (code, original_url, alias, clicks, is_public, expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, code, original_url, alias, clicks, is_public, expires_at, created_at, updated_at
`

type CreateShortURLParams struct {
	Code        string           `json:"code"`
	OriginalUrl string           `json:"original_url"`
	Alias       pgtype.Text      `json:"alias"`
	Clicks      int64            `json:"clicks"`
	IsPublic    bool             `json:"is_public"`
	ExpiresAt   pgtype.Timestamp `json:"expires_at"`
}

// URL Shortener Queries
func (q *Queries) CreateShortURL(ctx context.Context, arg CreateShortURLParams) (ShortUrl, error) {
	row := q.db.QueryRow(ctx, createShortURL,
		arg.Code,
		arg.OriginalUrl,
		arg.Alias,
		arg.Clicks,
		arg.IsPublic,
		arg.ExpiresAt,
	)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.OriginalUrl,
		&i.Alias,
		&i.Clicks,
		&i.IsPublic,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (title, description, completed, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, title, description, completed, user_id, created_at, updated_at
`

type CreateTodoParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Completed   bool        `json:"completed"`
	UserID      int64       `json:"user_id"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.UserID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createURLClick = `-- name: CreateURLClick :exec
INSERT INTO url_clicks (short_url_id, referrer, user_agent, ip_address)
VALUES ($1, $2, $3, $4)
`

type CreateURLClickParams struct {
	ShortUrlID int64       `json:"short_url_id"`
	Referrer   pgtype.Text `json:"referrer"`
	UserAgent  pgtype.Text `json:"user_agent"`
	IpAddress  pgtype.Text `json:"ip_address"`
}

func (q *Queries) CreateURLClick(ctx context.Context, arg CreateURLClickParams) error {
	_, err := q.db.Exec(ctx, createURLClick,
		arg.ShortUrlID,
		arg.Referrer,
		arg.UserAgent,
		arg.IpAddress,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password)
VALUES ($1, $2)
RETURNING id, username, created_at, updated_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID        int64            `json:"id"`
	Username  string           `json:"username"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredPastes = `-- name: DeleteExpiredPastes :exec
DELETE FROM pastes
WHERE expires_at IS NOT NULL AND expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredPastes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredPastes)
	return err
}

const deleteExpiredShortURLs = `-- name: DeleteExpiredShortURLs :exec
DELETE FROM short_urls
WHERE expires_at IS NOT NULL AND expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredShortURLs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredShortURLs)
	return err
}

const deletePaste = `-- name: DeletePaste :exec
DELETE FROM pastes
WHERE id = $1
`

func (q *Queries) DeletePaste(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePaste, id)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1 AND user_id = $2
`

type DeleteTodoParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.Exec(ctx, deleteTodo, arg.ID, arg.UserID)
	return err
}

const getPasteByID = `-- name: GetPasteByID :one
SELECT id, title, content, syntax, is_public, is_compressed, expires_at, created_at, updated_at
FROM pastes
WHERE id = $1
`

func (q *Queries) GetPasteByID(ctx context.Context, id string) (Paste, error) {
	row := q.db.QueryRow(ctx, getPasteByID, id)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Syntax,
		&i.IsPublic,
		&i.IsCompressed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQRCodeByID = `-- name: GetQRCodeByID :one
SELECT id, text, format, size, image_data, created_at
FROM qr_codes
WHERE id = $1
`

func (q *Queries) GetQRCodeByID(ctx context.Context, id string) (QrCode, error) {
	row := q.db.QueryRow(ctx, getQRCodeByID, id)
	var i QrCode
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Format,
		&i.Size,
		&i.ImageData,
		&i.CreatedAt,
	)
	return i, err
}

const getShortURLByCode = `-- name: GetShortURLByCode :one
SELECT id, code, original_url, alias, clicks, is_public, expires_at, created_at, updated_at
FROM short_urls
WHERE code = $1
`

func (q *Queries) GetShortURLByCode(ctx context.Context, code string) (ShortUrl, error) {
	row := q.db.QueryRow(ctx, getShortURLByCode, code)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.OriginalUrl,
		&i.Alias,
		&i.Clicks,
		&i.IsPublic,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, title, description, completed, user_id, created_at, updated_at
FROM todos
WHERE id = $1 AND user_id = $2
`

type GetTodoByIDParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTodoByID(ctx context.Context, arg GetTodoByIDParams) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodoByID, arg.ID, arg.UserID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        int64            `json:"id"`
	Username  string           `json:"username"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, created_at, updated_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementShortURLClicks = `-- name: IncrementShortURLClicks :exec
UPDATE short_urls
SET clicks = clicks + 1, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) IncrementShortURLClicks(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, incrementShortURLClicks, id)
	return err
}

const listRecentPastes = `-- name: ListRecentPastes :many
SELECT id, title, content, syntax, is_public, is_compressed, expires_at, created_at, updated_at
FROM pastes
WHERE is_public = true
ORDER BY created_at DESC
LIMIT $1
`

func (q *Queries) ListRecentPastes(ctx context.Context, limit int32) ([]Paste, error) {
	rows, err := q.db.Query(ctx, listRecentPastes, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paste
	for rows.Next() {
		var i Paste
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Syntax,
			&i.IsPublic,
			&i.IsCompressed,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, description, completed, user_id, created_at, updated_at
FROM todos
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTodosParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET title = $1, description = $2, completed = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $4 AND user_id = $5
RETURNING id, title, description, completed, user_id, created_at, updated_at
`

type UpdateTodoParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Completed   bool        `json:"completed"`
	ID          int64       `json:"id"`
	UserID      int64       `json:"user_id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.ID,
		arg.UserID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
